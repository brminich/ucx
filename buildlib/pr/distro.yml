parameters:
  demands: []
  name: subtest
  container:

jobs:
  - job: build_pr_${{ parameters.name }}
    displayName: Build on ${{ parameters.name }}
    workspace:
      clean: all
    pool:
      name: MLNX
      demands: ${{ parameters.demands }}

    ${{ if parameters.container }}:
      container: ${{ parameters.container }}
    steps:
      - checkout: self
        clean: true
        fetchDepth: 1

      - bash: |
          set -eE
          ./autogen.sh
          ucx_dir=$(System.DefaultWorkingDirectory)/ucx-install-master
          ./contrib/configure-release --enable-assertions  --without-java --without-go --prefix=${ucx_dir}
          make -s -j `nproc`
          make install
        displayName: Build ucx artifact

      - task: PublishBuildArtifacts@1
        inputs:
          pathToPublish: '$(System.DefaultWorkingDirectory)/ucx-install-master'
          artifactName: ucx_master_$(Build.BuildId)_${{ parameters.name }}

    # Perform test builds on relevant distributions.
  - job: build_${{ parameters.name }}
    dependsOn: build_pr_${{ parameters.name }}
    displayName: Build on ${{ parameters.name }}
    workspace:
      clean: all
    pool:
      name: MLNX
      demands: ${{ parameters.demands }}
    strategy:
      matrix:
        ucx_1_12:
            ucx_tag: v1.12.0
        ucx_1_14:
            ucx_tag: v1.14.0
    ${{ if parameters.container }}:
      container: ${{ parameters.container }}
    steps:
      - checkout: none

      - bash: |
          set -eEx
          git clone --depth 1 -b $(ucx_tag) https://github.com/openucx/ucx.git $(System.DefaultWorkingDirectory)/ucx-$(ucx_tag)
          cd $(System.DefaultWorkingDirectory)/ucx-$(ucx_tag)
          ucx_dir=${PWD}/install
          ./autogen.sh
          ./contrib/configure-release --enable-assertions --prefix=${ucx_dir} --without-java --without-go
          make -s -j `nproc`
          make install

          mkdir -p ${ucx_dir}/examples
          cd $(System.DefaultWorkingDirectory)/ucx-$(ucx_tag)/examples
          gcc -I${ucx_dir}/include -L${ucx_dir}/lib -o ${ucx_dir}/examples/client_server ucp_client_server.c -lm -lucs -lucp
          gcc -I${ucx_dir}/include -L${ucx_dir}/lib -o ${ucx_dir}/examples/ucp_hworld ucp_hello_world.c -lm -lucs -lucp
        displayName: Build ucx artifact

      - task: PublishBuildArtifacts@1
        inputs:
          pathToPublish: '$(System.DefaultWorkingDirectory)/ucx-$(ucx_tag)/install'
          artifactName: ucx_$(ucx_tag)_$(Build.BuildId)_${{ parameters.name }}

  - job: test_wire_compat_${{ parameters.name }}
    dependsOn: build_${{ parameters.name }}
    displayName: Test wire compatibility ${{ parameters.name }}
    workspace:
      clean: all
    pool:
      name: MLNX
      demands: ${{ parameters.demands }}
    strategy:
      matrix:
        ucx1_12_cs:
            ucx_tag: v1.12.0
            client_cmd: client_server -c tag -a
            server_cmd: client_server -c tag
            ucx_env: UCX_CM_USE_ALL_DEVICES=n
        ucx1_12_wa:
            ucx_tag: v1.12.0
            client_cmd: ucp_hworld -n
            server_cmd: ucp_hworld
            ucx_env: UCX_TLS=^sm UCX_IB_ROCE_LOCAL_SUBNET=y
        ucx1_14_cs:
            ucx_tag: v1.14.0
            client_cmd: client_server -c tag -a
            server_cmd: client_server -c tag
            ucx_env: ""
        ucx1_14_wa:
            ucx_tag: v1.14.0
            client_cmd: ucp_hworld -n
            server_cmd: ucp_hworld
            ucx_env: ""
        ucx1_14_cs_no_sm:
            ucx_tag: v1.14.0
            client_cmd: client_server -c tag -a
            server_cmd: client_server -c tag
            ucx_env: UCX_TLS=^sm
        ucx1_14_wa_no_sm:
            ucx_tag: v1.14.0
            client_cmd: ucp_hworld -n
            server_cmd: ucp_hworld
            ucx_env: UCX_TLS=^sm
    ${{ if parameters.container }}:
      container: ${{ parameters.container }}
    variables:
        ucx_master: ucx_master_$(Build.BuildId)_${{ parameters.name }}
        ucx_legacy: ucx_$(ucx_tag)_$(Build.BuildId)_${{ parameters.name }}
    steps:
      - checkout: none
        clean: true
      - task: DownloadBuildArtifacts@0
        displayName: Download UCX master
        inputs:
          artifactName: $(ucx_master)
          downloadPath: $(System.DefaultWorkingDirectory)
      - task: DownloadBuildArtifacts@0
        displayName: Download UCX $(ucx_tag)
        inputs:
          artifactName: $(ucx_legacy)
          downloadPath: $(System.DefaultWorkingDirectory)
      - bash: |
          chmod u+rwx $(System.DefaultWorkingDirectory)/$(ucx_master) -R
          chmod u+rwx $(System.DefaultWorkingDirectory)/$(ucx_legacy) -R
      - bash: |
          set -Eex
          export UCX_LOG_LEVEL=info UCX_WARN_UNUSED_ENV_VARS=n $(ucx_env)
          client_server_dir=$(System.DefaultWorkingDirectory)/$(ucx_legacy)/examples
          port=$((10000 + 1000 * $(AZP_AGENT_ID)))
          LD_LIBRARY_PATH=${UCX_LEGACY_LIB_PATH} ${client_server_dir}/$(server_cmd) -p ${port} &
          server_pid=$!
          sleep 5
          LD_LIBRARY_PATH=${UCX_PR_LIB_PATH} ${client_server_dir}/$(client_cmd) 127.0.0.1 -p ${port}
          if ! kill -9 ${server_pid}; then echo "server already terminated"; fi
        env:
          UCX_PR_LIB_PATH: $(System.DefaultWorkingDirectory)/$(ucx_master)/lib
          UCX_LEGACY_LIB_PATH: $(System.DefaultWorkingDirectory)/$(ucx_legacy)/lib
        displayName: Test server is legacy client is master
        timeoutInMinutes: 2
      - bash: |
          set -Eex
          export UCX_LOG_LEVEL=info UCX_WARN_UNUSED_ENV_VARS=n $(ucx_env)
          client_server_dir=$(System.DefaultWorkingDirectory)/$(ucx_legacy)/examples
          port=$((10000 + 1000 * $(AZP_AGENT_ID)))
          LD_LIBRARY_PATH=${UCX_PR_LIB_PATH} ${client_server_dir}/$(server_cmd)  -p ${port} &
          server_pid=$!
          sleep 5
          LD_LIBRARY_PATH=${UCX_LEGACY_LIB_PATH} ${client_server_dir}/$(client_cmd) 127.0.0.1 -p ${port}
          if ! kill -9 ${server_pid}; then echo "server already terminated"; fi
        env:
          UCX_PR_LIB_PATH: $(System.DefaultWorkingDirectory)/$(ucx_master)/lib
          UCX_LEGACY_LIB_PATH: $(System.DefaultWorkingDirectory)/$(ucx_legacy)/lib
        displayName: Test server is master client is legacy
        timeoutInMinutes: 2
